// 
// Copyright (c) Microsoft.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

package com.microsoft.windowsazure.management;

import com.microsoft.windowsazure.common.CloudException;
import com.microsoft.windowsazure.common.IServiceOperations;
import com.microsoft.windowsazure.management.ILocationOperations;
import com.microsoft.windowsazure.management.ManagementClient;
import com.microsoft.windowsazure.management.models.LocationsListResponse;
import com.microsoft.windowsazure.management.models.LocationsListResponse.Location;
import java.util.concurrent.Future;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import org.apache.http.HttpResponse;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.nio.client.CloseableHttpAsyncClient;
import org.apache.http.impl.nio.client.HttpAsyncClients;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.NodeList;

/**
* The Service Management API includes operations for listing the available data
* center locations for a hosted service in your subscription.  (see
* http://msdn.microsoft.com/en-us/library/windowsazure/gg441299.aspx for more
* information)
*/
class LocationOperations extends IServiceOperations<ManagementClient> implements ILocationOperations
{
    /**
    * Initializes a new instance of the LocationOperations class.
    *
    * @param client Reference to the service client.
    */
    LocationOperations(ManagementClient client)
    {
        this._client = client;
    }
    
    private ManagementClient _client;
    
    /**
    * Gets a reference to the
    * microsoft.windowsazure.management.ManagementClient.
    */
    public ManagementClient getClient() { return this._client; }
    
    /**
    * The List Locations operation lists all of the data center locations that
    * are valid for your subscription.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/gg441293.aspx for
    * more information)
    *
    * @return The List Locations operation response.
    */
    public LocationsListResponse ListAsync()
    {
        // Validate
        
        // Tracing
        
        // Construct URL
        String url = this.getClient().getBaseUri() + "/" + this.getClient().getCredentials().getSubscriptionId() + "/locations";
        
        // Create HTTP transport objects
        CloseableHttpAsyncClient httpClient = HttpAsyncClients.createDefault();
        try
        {
            httpClient.start();
            HttpGet httpRequest = new HttpGet(url);
            
            // Set Headers
            httpRequest.setRequestProperty("x-ms-version", "2013-03-01");
            
            // Set Credentials
            
            // Send Request
            HttpResponse httpResponse = null;
            Future<HttpResponse> httpRequestFuture = httpClient.execute(httpRequest);
            httpResponse = httpRequestFuture.get();
            int statusCode = httpResponse.getStatusLine().getStatusCode();
            if (statusCode != 200)
            {
                CloudException ex = CloudException.createFromXml(httpRequest, null, httpResponse, httpResponse.getEntity().getContent());
                throw ex;
            }
            
            // Create Result
            LocationsListResponse result = new LocationsListResponse();
            result.setStatusCode(statusCode);
            if (httpResponse.getHeaders("x-ms-request-id").getlength() > 0)
            {
                result.setRequestId(httpResponse.getHeaders("x-ms-request-id")[0]);
            }
            
            // Deserialize Response
            String responseContent = httpResponse.getEntity().getContent();
            DocumentBuilderFactory documentBuilderFactory = DocumentBuilderFactory.newInstance();
            DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();
            Document responseDoc = documentBuilder.parse(responseContent);
            
            NodeList elements = responseDoc.getElementsByTagNameNS("http://schemas.microsoft.com/windowsazure", "Locations");
            Element locationsSequenceElement = elements.getLength() > 0 ? (Element)elements.item(0) : null;
            if (locationsSequenceElement != null)
            {
                for (Element locationsElement : locationsSequenceElement.getElementsByTagNameNS("http://schemas.microsoft.com/windowsazure", "Location"))
                {
                    LocationsListResponse.Location locationInstance = new LocationsListResponse.Location();
                    result.getLocations().Add(locationInstance);
                    
                    NodeList elements2 = locationsElement.getElementsByTagNameNS("http://schemas.microsoft.com/windowsazure", "Name");
                    Element nameElement = elements2.getLength() > 0 ? (Element)elements2.item(0) : null;
                    if (nameElement != null)
                    {
                        String nameInstance;
                        nameInstance = nameElement.getNodeValue();
                        locationInstance.setName(nameInstance);
                    }
                    
                    NodeList elements3 = locationsElement.getElementsByTagNameNS("http://schemas.microsoft.com/windowsazure", "DisplayName");
                    Element displayNameElement = elements3.getLength() > 0 ? (Element)elements3.item(0) : null;
                    if (displayNameElement != null)
                    {
                        String displayNameInstance;
                        displayNameInstance = displayNameElement.getNodeValue();
                        locationInstance.setDisplayName(displayNameInstance);
                    }
                    
                    NodeList elements4 = locationsElement.getElementsByTagNameNS("http://schemas.microsoft.com/windowsazure", "AvailableServices");
                    Element availableServicesSequenceElement = elements4.getLength() > 0 ? (Element)elements4.item(0) : null;
                    if (availableServicesSequenceElement != null)
                    {
                        for (Element availableServicesElement : availableServicesSequenceElement.getElementsByTagNameNS("http://schemas.microsoft.com/windowsazure", "AvailableService"))
                        {
                            locationInstance.getAvailableServices().Add(availableServicesElement.getNodeValue());
                        }
                    }
                }
            }
            
            return result;
        }
        finally
        {
            if (httpClient != null)
            {
                httpClient.close();
            }
        }
    }
}
