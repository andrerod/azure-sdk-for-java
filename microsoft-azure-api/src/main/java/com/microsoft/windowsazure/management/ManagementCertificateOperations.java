// 
// Copyright (c) Microsoft.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

package com.microsoft.windowsazure.management;

import com.microsoft.windowsazure.OperationResponse;
import com.microsoft.windowsazure.common.CloudException;
import com.microsoft.windowsazure.common.IServiceOperations;
import com.microsoft.windowsazure.management.IManagementCertificateOperations;
import com.microsoft.windowsazure.management.ManagementClient;
import com.microsoft.windowsazure.management.models.ManagementCertificateCreateParameters;
import com.microsoft.windowsazure.management.models.ManagementCertificateGetResponse;
import com.microsoft.windowsazure.management.models.ManagementCertificateListResponse;
import com.microsoft.windowsazure.management.models.ManagementCertificateListResponse.SubscriptionCertificate;
import java.lang.NullPointerException;
import java.util.Date;
import java.util.concurrent.Future;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import org.apache.http.HttpResponse;
import org.apache.http.client.methods.HttpDelete;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.impl.nio.client.CloseableHttpAsyncClient;
import org.apache.http.impl.nio.client.HttpAsyncClients;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.NodeList;
import sun.misc.BASE64Decoder;

/**
* You can use management certificates, which are also known as subscription
* certificates, to authenticate clients attempting to connect to resources
* associated with your Windows Azure subscription.  (see
* http://msdn.microsoft.com/en-us/library/windowsazure/jj154124.aspx for more
* information)
*/
class ManagementCertificateOperations extends IServiceOperations<ManagementClient> implements IManagementCertificateOperations
{
    /**
    * Initializes a new instance of the ManagementCertificateOperations class.
    *
    * @param client Reference to the service client.
    */
    ManagementCertificateOperations(ManagementClient client)
    {
        this._client = client;
    }
    
    private ManagementClient _client;
    
    /**
    * Gets a reference to the
    * microsoft.windowsazure.management.ManagementClient.
    */
    public ManagementClient getClient() { return this._client; }
    
    /**
    * The Add Management Certificate operation adds a certificate to the list
    * of management certificates. Management certificates, which are also
    * known as subscription certificates, authenticate clients attempting to
    * connect to resources associated with your Windows Azure subscription.
    * (see http://msdn.microsoft.com/en-us/library/windowsazure/jj154123.aspx
    * for more information)
    *
    * @param parameters Parameters supplied to the Create Management
    * Certificate operation.
    * @return A standard service response including an HTTP status code and
    * request ID.
    */
    public OperationResponse CreateAsync(ManagementCertificateCreateParameters parameters)
    {
        // Validate
        if (parameters == null)
        {
            throw new NullPointerException("parameters");
        }
        
        // Tracing
        
        // Construct URL
        String url = this.getClient().getBaseUri() + "/" + this.getClient().getCredentials().getSubscriptionId() + "/certificates";
        
        // Create HTTP transport objects
        CloseableHttpAsyncClient httpClient = HttpAsyncClients.createDefault();
        try
        {
            httpClient.start();
            HttpPost httpRequest = new HttpPost(url);
            
            // Set Headers
            httpRequest.setRequestProperty("Content-Type", "application/xml");
            httpRequest.setRequestProperty("x-ms-version", "2013-03-01");
            
            // Set Credentials
            
            // Serialize Request
            String requestContent = null;
            DocumentBuilderFactory documentBuilderFactory = DocumentBuilderFactory.newInstance();
            DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();
            Document requestDoc = documentBuilder.newDocument();
            
            Element subscriptionCertificateElement = requestDoc.createElementNS("http://schemas.microsoft.com/windowsazure", "SubscriptionCertificate");
            requestDoc.appendChild(subscriptionCertificateElement);
            
            if (parameters.getPublicKey() != null)
            {
                Element subscriptionCertificatePublicKeyElement = requestDoc.createElementNS("http://schemas.microsoft.com/windowsazure", "SubscriptionCertificatePublicKey");
                subscriptionCertificatePublicKeyElement.appendChild(requestDoc.createTextNode(Base64.encodeBase64String(parameters.getPublicKey())));
                subscriptionCertificateElement.appendChild(subscriptionCertificatePublicKeyElement);
            }
            
            if (parameters.getThumbprint() != null)
            {
                Element subscriptionCertificateThumbprintElement = requestDoc.createElementNS("http://schemas.microsoft.com/windowsazure", "SubscriptionCertificateThumbprint");
                subscriptionCertificateThumbprintElement.appendChild(requestDoc.createTextNode(parameters.getThumbprint()));
                subscriptionCertificateElement.appendChild(subscriptionCertificateThumbprintElement);
            }
            
            if (parameters.getData() != null)
            {
                Element subscriptionCertificateDataElement = requestDoc.createElementNS("http://schemas.microsoft.com/windowsazure", "SubscriptionCertificateData");
                subscriptionCertificateDataElement.appendChild(requestDoc.createTextNode(Base64.encodeBase64String(parameters.getData())));
                subscriptionCertificateElement.appendChild(subscriptionCertificateDataElement);
            }
            
            requestContent = null;
            httpRequest.setContent(requestContent);
            httpRequest.getContent().getHeaders().setContentType("application/xml");
            
            // Send Request
            HttpResponse httpResponse = null;
            Future<HttpResponse> httpRequestFuture = httpClient.execute(httpRequest);
            httpResponse = httpRequestFuture.get();
            int statusCode = httpResponse.getStatusLine().getStatusCode();
            if (statusCode != 200)
            {
                CloudException ex = CloudException.createFromXml(httpRequest, requestContent, httpResponse, httpResponse.getEntity().getContent());
                throw ex;
            }
            
            // Create Result
            OperationResponse result = new OperationResponse();
            result.setStatusCode(statusCode);
            if (httpResponse.getHeaders("x-ms-request-id").getlength() > 0)
            {
                result.setRequestId(httpResponse.getHeaders("x-ms-request-id")[0]);
            }
            
            return result;
        }
        finally
        {
            if (httpClient != null)
            {
                httpClient.close();
            }
        }
    }
    
    /**
    * The Delete Management Certificate operation deletes a certificate from
    * the list of management certificates. Management certificates, which are
    * also known as subscription certificates, authenticate clients attempting
    * to connect to resources associated with your Windows Azure subscription.
    * (see http://msdn.microsoft.com/en-us/library/windowsazure/jj154127.aspx
    * for more information)
    *
    * @param thumbprint the thumbprint value of the certificate to delete.
    * @return A standard service response including an HTTP status code and
    * request ID.
    */
    public OperationResponse DeleteAsync(String thumbprint)
    {
        // Validate
        if (thumbprint == null)
        {
            throw new NullPointerException("thumbprint");
        }
        
        // Tracing
        
        // Construct URL
        String url = this.getClient().getBaseUri() + "/" + this.getClient().getCredentials().getSubscriptionId() + "/certificates/" + thumbprint;
        
        // Create HTTP transport objects
        CloseableHttpAsyncClient httpClient = HttpAsyncClients.createDefault();
        try
        {
            httpClient.start();
            HttpDelete httpRequest = new HttpDelete(url);
            
            // Set Headers
            httpRequest.setRequestProperty("x-ms-version", "2013-03-01");
            
            // Set Credentials
            
            // Send Request
            HttpResponse httpResponse = null;
            Future<HttpResponse> httpRequestFuture = httpClient.execute(httpRequest);
            httpResponse = httpRequestFuture.get();
            int statusCode = httpResponse.getStatusLine().getStatusCode();
            if (statusCode != 200 && statusCode != 404)
            {
                CloudException ex = CloudException.createFromXml(httpRequest, null, httpResponse, httpResponse.getEntity().getContent());
                throw ex;
            }
            
            // Create Result
            OperationResponse result = new OperationResponse();
            result.setStatusCode(statusCode);
            if (httpResponse.getHeaders("x-ms-request-id").getlength() > 0)
            {
                result.setRequestId(httpResponse.getHeaders("x-ms-request-id")[0]);
            }
            
            return result;
        }
        finally
        {
            if (httpClient != null)
            {
                httpClient.close();
            }
        }
    }
    
    /**
    * The Get Management Certificate operation retrieves information about the
    * management certificate with the specified thumbprint. Management
    * certificates, which are also known as subscription certificates,
    * authenticate clients attempting to connect to resources associated with
    * your Windows Azure subscription.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/jj154131.aspx for
    * more information)
    *
    * @param thumbprint The thumbprint value of the certificate to retrieve
    * information about.
    * @return The Get Management Certificate operation response.
    */
    public ManagementCertificateGetResponse GetAsync(String thumbprint)
    {
        // Validate
        if (thumbprint == null)
        {
            throw new NullPointerException("thumbprint");
        }
        
        // Tracing
        
        // Construct URL
        String url = this.getClient().getBaseUri() + "/" + this.getClient().getCredentials().getSubscriptionId() + "/certificates/" + thumbprint;
        
        // Create HTTP transport objects
        CloseableHttpAsyncClient httpClient = HttpAsyncClients.createDefault();
        try
        {
            httpClient.start();
            HttpGet httpRequest = new HttpGet(url);
            
            // Set Headers
            httpRequest.setRequestProperty("x-ms-version", "2013-03-01");
            
            // Set Credentials
            
            // Send Request
            HttpResponse httpResponse = null;
            Future<HttpResponse> httpRequestFuture = httpClient.execute(httpRequest);
            httpResponse = httpRequestFuture.get();
            int statusCode = httpResponse.getStatusLine().getStatusCode();
            if (statusCode != 200)
            {
                CloudException ex = CloudException.createFromXml(httpRequest, null, httpResponse, httpResponse.getEntity().getContent());
                throw ex;
            }
            
            // Create Result
            ManagementCertificateGetResponse result = new ManagementCertificateGetResponse();
            result.setStatusCode(statusCode);
            if (httpResponse.getHeaders("x-ms-request-id").getlength() > 0)
            {
                result.setRequestId(httpResponse.getHeaders("x-ms-request-id")[0]);
            }
            
            // Deserialize Response
            String responseContent = httpResponse.getEntity().getContent();
            DocumentBuilderFactory documentBuilderFactory = DocumentBuilderFactory.newInstance();
            DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();
            Document responseDoc = documentBuilder.parse(responseContent);
            
            NodeList elements = responseDoc.getElementsByTagNameNS("http://schemas.microsoft.com/windowsazure", "SubscriptionCertificate");
            Element subscriptionCertificateElement = elements.getLength() > 0 ? (Element)elements.item(0) : null;
            if (subscriptionCertificateElement != null)
            {
                NodeList elements2 = subscriptionCertificateElement.getElementsByTagNameNS("http://schemas.microsoft.com/windowsazure", "SubscriptionCertificatePublicKey");
                Element subscriptionCertificatePublicKeyElement = elements2.getLength() > 0 ? (Element)elements2.item(0) : null;
                if (subscriptionCertificatePublicKeyElement != null)
                {
                    byte[] subscriptionCertificatePublicKeyInstance;
                    subscriptionCertificatePublicKeyInstance = new BASE64Decoder().decodeBuffer(subscriptionCertificatePublicKeyElement.getNodeValue());
                    result.setPublicKey(subscriptionCertificatePublicKeyInstance);
                }
                
                NodeList elements3 = subscriptionCertificateElement.getElementsByTagNameNS("http://schemas.microsoft.com/windowsazure", "SubscriptionCertificateThumbprint");
                Element subscriptionCertificateThumbprintElement = elements3.getLength() > 0 ? (Element)elements3.item(0) : null;
                if (subscriptionCertificateThumbprintElement != null)
                {
                    String subscriptionCertificateThumbprintInstance;
                    subscriptionCertificateThumbprintInstance = subscriptionCertificateThumbprintElement.getNodeValue();
                    result.setThumbprint(subscriptionCertificateThumbprintInstance);
                }
                
                NodeList elements4 = subscriptionCertificateElement.getElementsByTagNameNS("http://schemas.microsoft.com/windowsazure", "SubscriptionCertificateData");
                Element subscriptionCertificateDataElement = elements4.getLength() > 0 ? (Element)elements4.item(0) : null;
                if (subscriptionCertificateDataElement != null)
                {
                    byte[] subscriptionCertificateDataInstance;
                    subscriptionCertificateDataInstance = new BASE64Decoder().decodeBuffer(subscriptionCertificateDataElement.getNodeValue());
                    result.setData(subscriptionCertificateDataInstance);
                }
                
                NodeList elements5 = subscriptionCertificateElement.getElementsByTagNameNS("http://schemas.microsoft.com/windowsazure", "Created");
                Element createdElement = elements5.getLength() > 0 ? (Element)elements5.item(0) : null;
                if (createdElement != null)
                {
                    Date createdInstance;
                    createdInstance = createdElement.getNodeValue();
                    result.setCreated(createdInstance);
                }
            }
            
            return result;
        }
        finally
        {
            if (httpClient != null)
            {
                httpClient.close();
            }
        }
    }
    
    /**
    * The List Management Certificates operation lists and returns basic
    * information about all of the management certificates associated with the
    * specified subscription. Management certificates, which are also known as
    * subscription certificates, authenticate clients attempting to connect to
    * resources associated with your Windows Azure subscription.  (see
    * http://msdn.microsoft.com/en-us/library/windowsazure/jj154105.aspx for
    * more information)
    *
    * @return The List Management Certificates operation response.
    */
    public ManagementCertificateListResponse ListAsync()
    {
        // Validate
        
        // Tracing
        
        // Construct URL
        String url = this.getClient().getBaseUri() + "/" + this.getClient().getCredentials().getSubscriptionId() + "/certificates";
        
        // Create HTTP transport objects
        CloseableHttpAsyncClient httpClient = HttpAsyncClients.createDefault();
        try
        {
            httpClient.start();
            HttpGet httpRequest = new HttpGet(url);
            
            // Set Headers
            httpRequest.setRequestProperty("x-ms-version", "2013-03-01");
            
            // Set Credentials
            
            // Send Request
            HttpResponse httpResponse = null;
            Future<HttpResponse> httpRequestFuture = httpClient.execute(httpRequest);
            httpResponse = httpRequestFuture.get();
            int statusCode = httpResponse.getStatusLine().getStatusCode();
            if (statusCode != 200)
            {
                CloudException ex = CloudException.createFromXml(httpRequest, null, httpResponse, httpResponse.getEntity().getContent());
                throw ex;
            }
            
            // Create Result
            ManagementCertificateListResponse result = new ManagementCertificateListResponse();
            result.setStatusCode(statusCode);
            if (httpResponse.getHeaders("x-ms-request-id").getlength() > 0)
            {
                result.setRequestId(httpResponse.getHeaders("x-ms-request-id")[0]);
            }
            
            // Deserialize Response
            String responseContent = httpResponse.getEntity().getContent();
            DocumentBuilderFactory documentBuilderFactory = DocumentBuilderFactory.newInstance();
            DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();
            Document responseDoc = documentBuilder.parse(responseContent);
            
            NodeList elements = responseDoc.getElementsByTagNameNS("http://schemas.microsoft.com/windowsazure", "SubscriptionCertificates");
            Element subscriptionCertificatesSequenceElement = elements.getLength() > 0 ? (Element)elements.item(0) : null;
            if (subscriptionCertificatesSequenceElement != null)
            {
                for (Element subscriptionCertificatesElement : subscriptionCertificatesSequenceElement.getElementsByTagNameNS("http://schemas.microsoft.com/windowsazure", "SubscriptionCertificate"))
                {
                    ManagementCertificateListResponse.SubscriptionCertificate subscriptionCertificateInstance = new ManagementCertificateListResponse.SubscriptionCertificate();
                    result.getSubscriptionCertificates().Add(subscriptionCertificateInstance);
                    
                    NodeList elements2 = subscriptionCertificatesElement.getElementsByTagNameNS("http://schemas.microsoft.com/windowsazure", "SubscriptionCertificatePublicKey");
                    Element subscriptionCertificatePublicKeyElement = elements2.getLength() > 0 ? (Element)elements2.item(0) : null;
                    if (subscriptionCertificatePublicKeyElement != null)
                    {
                        byte[] subscriptionCertificatePublicKeyInstance;
                        subscriptionCertificatePublicKeyInstance = new BASE64Decoder().decodeBuffer(subscriptionCertificatePublicKeyElement.getNodeValue());
                        subscriptionCertificateInstance.setPublicKey(subscriptionCertificatePublicKeyInstance);
                    }
                    
                    NodeList elements3 = subscriptionCertificatesElement.getElementsByTagNameNS("http://schemas.microsoft.com/windowsazure", "SubscriptionCertificateThumbprint");
                    Element subscriptionCertificateThumbprintElement = elements3.getLength() > 0 ? (Element)elements3.item(0) : null;
                    if (subscriptionCertificateThumbprintElement != null)
                    {
                        String subscriptionCertificateThumbprintInstance;
                        subscriptionCertificateThumbprintInstance = subscriptionCertificateThumbprintElement.getNodeValue();
                        subscriptionCertificateInstance.setThumbprint(subscriptionCertificateThumbprintInstance);
                    }
                    
                    NodeList elements4 = subscriptionCertificatesElement.getElementsByTagNameNS("http://schemas.microsoft.com/windowsazure", "SubscriptionCertificateData");
                    Element subscriptionCertificateDataElement = elements4.getLength() > 0 ? (Element)elements4.item(0) : null;
                    if (subscriptionCertificateDataElement != null)
                    {
                        byte[] subscriptionCertificateDataInstance;
                        subscriptionCertificateDataInstance = new BASE64Decoder().decodeBuffer(subscriptionCertificateDataElement.getNodeValue());
                        subscriptionCertificateInstance.setData(subscriptionCertificateDataInstance);
                    }
                    
                    NodeList elements5 = subscriptionCertificatesElement.getElementsByTagNameNS("http://schemas.microsoft.com/windowsazure", "Created");
                    Element createdElement = elements5.getLength() > 0 ? (Element)elements5.item(0) : null;
                    if (createdElement != null)
                    {
                        Date createdInstance;
                        createdInstance = createdElement.getNodeValue();
                        subscriptionCertificateInstance.setCreated(createdInstance);
                    }
                }
            }
            
            return result;
        }
        finally
        {
            if (httpClient != null)
            {
                httpClient.close();
            }
        }
    }
}
